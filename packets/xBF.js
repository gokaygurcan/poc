// @flow

/*
  0x01: Initialize Fast Walk Prevention
  0x02: Add key to Fast Walk Stack
  0x03: ???
  0x04: Close Generic Gump
  0x05: Screen size
  0x06: Party System
  0x07: ???
  0x08: Set cursor hue / Set MAP
  0x09: ???
  0x0a: wrestling stun
  0x0b: Client Language
  0x0c: Closed Status Gump
  0x0d: ???
  0x0e: 3D Client Action
  0x0f: ClientType , send once at login
  0x10: unknown, related to 0xD6 Mega Cliloc somehow
  0x11: ???
  0x12: ???
  0x13: Request popup menu
  0x14: Display Popup/context menu (2D and KR)
  0x15: Popup Entry Selection
  0x16: Close User Interface Windows
  0x17: Codex of wisdom
  0x18: Enable map-diff (files)
  0x19: Extended stats
  0x1a: Extended stats
  0x1b: New Spellbook
  0x1c: Spell selected, client side
  0x1d: Send House Revision State
  0x1e:
  0x1f: ???
  0x20: Custom Housing.
  0x21: (AOS) Ability icon confirm.
  0x22: Damage
  0x23: ???
  0x24: UnKnown
  0x25: SE Ability Change
  0x26: Mount Speed
  0x27: ???
  0x28: ???
  0x29: ???
  0x2a: Change Race Request (only 2D, Server packet)
  0x2a: Change Race Response (only 2D, Client packet)
  0x2b: ???
  0x2c: Use targeted item (client side packet)
  0x2d: Cast targeted spell (client side packet)
  0x2e: Use targeted skill (client side packet)
  0x2f: KR House Menu Gump
  0x30: ???
  0x31: ???
  0x32: Toggle gargoyle flying
*/
export const xBF = (): Buffer => {
  return Buffer.from([0x00]);
};

export const xBFx08 = (): Buffer => {
  let tmp_0xbf_0x08: Array<number> = [0xbf]; // general information packet

  tmp_0xbf_0x08 = tmp_0xbf_0x08.concat([0x00, 0x06]); // length
  tmp_0xbf_0x08 = tmp_0xbf_0x08.concat([0x00, 0x08]); // subcommand id (set cursor hue / set MAP)
  // subcommand details
  tmp_0xbf_0x08 = tmp_0xbf_0x08.concat([0x00]); // hue (0 = Felucca, unhued / BRITANNIA map. 1 = Trammel, hued gold / BRITANNIA map, 2 = (switch to) ILSHENAR map)

  return Buffer.from(tmp_0xbf_0x08);
};

export const xBFx18 = (): Buffer => {
  let tmp_0xbf_0x18: Array<number> = [0xbf]; // general information packet

  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x31]); // length
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x18]); // subcommand id (enable map-diff)
  // subcommand details
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x05]); // number of maps
  // for each map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of map patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of static patches in this map
  // TODO: convert to a loop
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of map patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of static patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of map patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of static patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of map patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of static patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of map patches in this map
  tmp_0xbf_0x18 = tmp_0xbf_0x18.concat([0x00, 0x00, 0x00, 0x00]); // number of static patches in this map
  // endFor

  return Buffer.from(tmp_0xbf_0x18);
};

export const xBFx19 = (): Buffer => {
  let tmp_0xbf_0x19: Array<number> = [0xbf]; // general information packet

  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x00, 0x06]); // length
  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x00, 0x19]); // subcommand id (extended stats)
  // subcommand details
  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x02]); // subsubcommand (0x2 for 2D client, 0x5 for KR client)
  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x00, 0x00, 0x1f, 0xc4]); // serial
  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x00]); // unknown (always 0)
  tmp_0xbf_0x19 = tmp_0xbf_0x19.concat([0x00]); // Lock flags (0 = up, 1 = down, 2 = locked, FF = update mobile status animation ( KR only )

  return Buffer.from(tmp_0xbf_0x19);
};
