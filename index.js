//

// ------------------------------ imports

// core modules
import { createServer } from 'net';

// node modules
import { hexy } from 'hexy';

// ------------------------------ utilities

const dump = (data, sender) => {
  console.log(`${sender === 'client' ? sender + ' --->' : '<---' + sender}`);
  console.log(hexy(data, { width: 32, numbering: 'none', format: 'twos' }));
};

const decrypt = (data, socket) => {
  const keys = calculateKeys(socket.version);

  const EncryptionSeed = socket.seed;
  const FirstClientKey = keys.key1;
  const SecondClientKey = keys.key2;

  let CurrentKey0 = ((~EncryptionSeed ^ 0x00001357) << 16) | ((EncryptionSeed ^ 0xffffaaaa) & 0x0000ffff);
  let CurrentKey1 = ((EncryptionSeed ^ 0x43210000) >>> 16) | ((~EncryptionSeed ^ 0xabcdffff) & 0xffff0000);

  for (let i = 0; i < data.length; ++i) {
    data[i] = CurrentKey0 ^ data[i];

    let oldkey0 = CurrentKey0;
    let oldkey1 = CurrentKey1;

    CurrentKey0 = ((oldkey0 >>> 1) | (oldkey1 << 31)) ^ SecondClientKey;
    CurrentKey1 =
      (((((oldkey1 >>> 1) | (oldkey0 << 31)) ^ (FirstClientKey - 1)) >>> 1) | (oldkey0 << 31)) ^ FirstClientKey;
  }

  return data;
};

const calculateKeys = ({ major, minor, revision, patch }) => {
  let key1 = (major << 23) | (minor << 14) | (revision << 4);
  key1 ^= (revision * revision) << 9;
  key1 ^= minor * minor;
  key1 ^= (minor * 11) << 24;
  key1 ^= (revision * 7) << 19;
  key1 ^= 0x2c13a5fd; // 739485181

  let key2 = (major << 22) | (revision << 13) | (minor << 3);
  key2 ^= (revision * revision * 3) << 10;
  key2 ^= minor * minor;
  key2 ^= (minor * 13) << 23;
  key2 ^= (revision * 7) << 18;
  key2 ^= 0xa31d527f; // 2736607871

  return {
    key1,
    key2
  };
};

const compression = src => {
  let dest = [];

  // prettier-ignore
  var huffmanTable = [
      0x2, 0x000, 0x5, 0x01f, 0x6, 0x022, 0x7, 0x034, 0x7, 0x075, 0x6, 0x028, 0x6, 0x03b, 0x7, 0x032, 
      0x8, 0x0e0, 0x8, 0x062, 0x7, 0x056, 0x8, 0x079, 0x9, 0x19d, 0x8, 0x097, 0x6, 0x02a, 0x7, 0x057, 
      0x8, 0x071, 0x8, 0x05b, 0x9, 0x1cc, 0x8, 0x0a7, 0x7, 0x025, 0x7, 0x04f, 0x8, 0x066, 0x8, 0x07d, 
      0x9, 0x191, 0x9, 0x1ce, 0x7, 0x03f, 0x9, 0x090, 0x8, 0x059, 0x8, 0x07b, 0x8, 0x091, 0x8, 0x0c6, 
      0x6, 0x02d, 0x9, 0x186, 0x8, 0x06f, 0x9, 0x093, 0xa, 0x1cc, 0x8, 0x05a, 0xa, 0x1ae, 0xa, 0x1c0, 
      0x9, 0x148, 0x9, 0x14a, 0x9, 0x082, 0xa, 0x19f, 0x9, 0x171, 0x9, 0x120, 0x9, 0x0e7, 0xa, 0x1f3, 
      0x9, 0x14b, 0x9, 0x100, 0x9, 0x190, 0x6, 0x013, 0x9, 0x161, 0x9, 0x125, 0x9, 0x133, 0x9, 0x195, 
      0x9, 0x173, 0x9, 0x1ca, 0x9, 0x086, 0x9, 0x1e9, 0x9, 0x0db, 0x9, 0x1ec, 0x9, 0x08b, 0x9, 0x085, 
      0x5, 0x00a, 0x8, 0x096, 0x8, 0x09c, 0x9, 0x1c3, 0x9, 0x19c, 0x9, 0x08f, 0x9, 0x18f, 0x9, 0x091, 
      0x9, 0x087, 0x9, 0x0c6, 0x9, 0x177, 0x9, 0x089, 0x9, 0x0d6, 0x9, 0x08c, 0x9, 0x1ee, 0x9, 0x1eb, 
      0x9, 0x084, 0x9, 0x164, 0x9, 0x175, 0x9, 0x1cd, 0x8, 0x05e, 0x9, 0x088, 0x9, 0x12b, 0x9, 0x172, 
      0x9, 0x10a, 0x9, 0x08d, 0x9, 0x13a, 0x9, 0x11c, 0xa, 0x1e1, 0xa, 0x1e0, 0x9, 0x187, 0xa, 0x1dc, 
      0xa, 0x1df, 0x7, 0x074, 0x9, 0x19f, 0x8, 0x08d, 0x8, 0x0e4, 0x7, 0x079, 0x9, 0x0ea, 0x9, 0x0e1, 
      0x8, 0x040, 0x7, 0x041, 0x9, 0x10b, 0x9, 0x0b0, 0x8, 0x06a, 0x8, 0x0c1, 0x7, 0x071, 0x7, 0x078, 
      0x8, 0x0b1, 0x9, 0x14c, 0x7, 0x043, 0x8, 0x076, 0x7, 0x066, 0x7, 0x04d, 0x9, 0x08a, 0x6, 0x02f, 
      0x8, 0x0c9, 0x9, 0x0ce, 0x9, 0x149, 0x9, 0x160, 0xa, 0x1ba, 0xa, 0x19e, 0xa, 0x39f, 0x9, 0x0e5, 
      0x9, 0x194, 0x9, 0x184, 0x9, 0x126, 0x7, 0x030, 0x8, 0x06c, 0x9, 0x121, 0x9, 0x1e8, 0xa, 0x1c1, 
      0xa, 0x11d, 0xa, 0x163, 0xa, 0x385, 0xa, 0x3db, 0xa, 0x17d, 0xa, 0x106, 0xa, 0x397, 0xa, 0x24e, 
      0x7, 0x02e, 0x8, 0x098, 0xa, 0x33c, 0xa, 0x32e, 0xa, 0x1e9, 0x9, 0x0bf, 0xa, 0x3df, 0xa, 0x1dd, 
      0xa, 0x32d, 0xa, 0x2ed, 0xa, 0x30b, 0xa, 0x107, 0xa, 0x2e8, 0xa, 0x3de, 0xa, 0x125, 0xa, 0x1e8, 
      0x9, 0x0e9, 0xa, 0x1cd, 0xa, 0x1b5, 0x9, 0x165, 0xa, 0x232, 0xa, 0x2e1, 0xb, 0x3ae, 0xb, 0x3c6, 
      0xb, 0x3e2, 0xa, 0x205, 0xa, 0x29a, 0xa, 0x248, 0xa, 0x2cd, 0xa, 0x23b, 0xb, 0x3c5, 0xa, 0x251, 
      0xa, 0x2e9, 0xa, 0x252, 0x9, 0x1ea, 0xb, 0x3a0, 0xb, 0x391, 0xa, 0x23c, 0xb, 0x392, 0xb, 0x3d5, 
      0xa, 0x233, 0xa, 0x2cc, 0xb, 0x390, 0xa, 0x1bb, 0xb, 0x3a1, 0xb, 0x3c4, 0xa, 0x211, 0xa, 0x203, 
      0x9, 0x12a, 0xa, 0x231, 0xb, 0x3e0, 0xa, 0x29b, 0xb, 0x3d7, 0xa, 0x202, 0xb, 0x3ad, 0xa, 0x213, 
      0xa, 0x253, 0xa, 0x32c, 0xa, 0x23d, 0xa, 0x23f, 0xa, 0x32f, 0xa, 0x11c, 0xa, 0x384, 0xa, 0x31c, 
      0xa, 0x17c, 0xa, 0x30a, 0xa, 0x2e0, 0xa, 0x276, 0xa, 0x250, 0xb, 0x3e3, 0xa, 0x396, 0xa, 0x18f, 
      0xa, 0x204, 0xa, 0x206, 0xa, 0x230, 0xa, 0x265, 0xa, 0x212, 0xa, 0x23e, 0xb, 0x3ac, 0xb, 0x393, 
      0xb, 0x3e1, 0xa, 0x1de, 0xb, 0x3d6, 0xa, 0x31d, 0xb, 0x3e5, 0xb, 0x3e4, 0xa, 0x207, 0xb, 0x3c7, 
      0xa, 0x277, 0xb, 0x3d4, 0x8, 0x0c0, 0xa, 0x162, 0xa, 0x3da, 0xa, 0x124, 0xa, 0x1b4, 0xa, 0x264, 
      0xa, 0x33d, 0xa, 0x1d1, 0xa, 0x1af, 0xa, 0x39e, 0xa, 0x24f, 0xb, 0x373, 0xa, 0x249, 0xb, 0x372, 
      0x9, 0x167, 0xa, 0x210, 0xa, 0x23a, 0xa, 0x1b8, 0xb, 0x3af, 0xa, 0x18e, 0xa, 0x2ec, 0x7, 0x062, 
      0x4, 0x00d
    ];

  let bitCount = 0;
  let bitValue = 0;
  let pEntry = 0;
  let iDest = 0;

  for (let i = 0; i < src.length; ++i) {
    pEntry = src[i] << 1; // DO NOT TRUNCATE TO 8 BITS

    bitCount += huffmanTable[pEntry];
    bitValue <<= huffmanTable[pEntry];
    bitValue |= huffmanTable[pEntry + 1];

    while (bitCount >= 8) {
      bitCount -= 8;
      dest[iDest++] = (bitValue >>> bitCount) & 0xff;
    }
  }

  // terminal code
  pEntry = 0x200;

  bitCount += huffmanTable[pEntry];
  bitValue <<= huffmanTable[pEntry];
  bitValue |= huffmanTable[pEntry + 1];

  // align on byte boundary
  if ((bitCount & 7) !== 0) {
    bitValue <<= 8 - (bitCount & 7);
    bitCount += 8 - (bitCount & 7);
  }

  while (bitCount >= 8) {
    bitCount -= 8;
    dest[iDest++] = (bitValue >>> bitCount) & 0xff;
  }

  return dest;
};

// ------------------------------ variables

const config = {
  port: 2593,
  servers: [
    {
      id: 1,
      name: 'Hello World',
      active: true,
      ip: '127.0.0.1',
      port: 2593,
      max_players: 100,
      timezone: 2
    },
    {
      id: 2,
      name: 'Test Server',
      active: false,
      ip: '127.0.0.2',
      port: 2593,
      max_players: 100,
      timezone: 2
    },
    {
      id: 3,
      name: 'Closed Server',
      active: false,
      ip: '127.0.0.3',
      port: 2593,
      max_players: 100,
      timezone: 2
    }
  ]
};
const server = createServer();
let response;

// ------------------------------ events

server.on('connection', socket => {
  console.log('server::connection');

  socket.setNoDelay(true); // the nagle algorithm

  socket.on('data', data => {
    dump(data, 'client');

    let cmd = data.readUInt8(0);

    if (cmd === 0xef) {
      // login seed packet
      let seed = data.readUInt32BE(1);
      let major = data.readUInt32BE(5);
      let minor = data.readUInt32BE(9);
      let revision = data.readUInt32BE(13);
      let patch = data.readUInt32BE(17);

      socket.seed = seed;
      socket.version = { major, minor, revision, patch };
    } else {
      data = decrypt(data, socket);
      dump(data, 'client');

      // decrypted cmd
      cmd = data.readUInt8(0);
    }

    if (cmd === 0x73) {
      // ping packet
      response = Buffer.from([
        0x73, // ping
        data.readUInt8(1) // sequence number
      ]);
    } else if (cmd === 0x80) {
      // login request packet
      let username = data
        .slice(1, 31)
        .toString('utf8')
        .split('\0')[0];
      let password = data
        .slice(31, 61)
        .toString('utf8')
        .split('\0')[0];
      let nextLoginKey = data.readUInt8(61);

      if (username === 'username' && password === 'password') {
        let servers = config.servers.filter(server => server.active);
        let tmp = [0xa8]; // game server list

        let fixedLength = 1 + 2 + 1 + 2; // cmd + length + sysinfo + number of servers
        let dynamicLength = servers.length * (2 + 32 + 1 + 1 + 4); // index + name + percentage + timezone + ip
        let totalLength = fixedLength + dynamicLength;
        let length = [totalLength & 0xff00, totalLength & 0xff];
        tmp = tmp.concat(length); // length
        tmp = tmp.concat([0x5d]); // system info
        tmp = tmp.concat([servers.length & 0xff00, servers.length & 0xff]); // # of servers

        for (let i = 0; i < servers.length; ++i) {
          let server = servers[i];

          tmp = tmp.concat([i & 0xff00, i & 0xff]); // server index (0-based)

          let name = Buffer.alloc(32);
          name.write(server.name);
          tmp = tmp.concat(name.toJSON().data); // server name
          tmp = tmp.concat([0x01]); // percent full
          tmp = tmp.concat([0x02]); // timezone
          tmp = tmp.concat(
            server.ip
              .split('.')
              .reverse()
              .map(octet => parseInt(octet))
          ); // server ip to ping
        }

        response = Buffer.from(tmp);
      } else {
        response = Buffer.from([
          0x82, // login rejected packet
          0x00 // incorrect name/password
        ]);
      }
    } else if (cmd === 0xa0) {
      let index = data.readUInt16BE(0);
      let server = config.servers[index - 1];
    }

    if (response) {
      dump(response, 'server');
      socket.write(response);
      response = null;
    }
  });

  socket.on('close', hadError => console.log(`server::socket::close ${hadError ? '| hadError: ' + hadError : ''}`));
  socket.on('error', hadError => console.log(`server::socket::error ${hadError ? '| hadError: ' + hadError : ''}`));
  socket.on('connect', () => console.log('server::socket::connect'));
  socket.on('drain', () => console.log('server::socket::drain'));
  socket.on('end', () => console.log('server::socket::end'));
  socket.on('lookup', (error, address, family, host) =>
    console.log('server::socket::lookup', error, address, family, host)
  );
  socket.on('timeout', () => console.log('server::socket::timeout'));
});

server.on('listening', () => console.log('server::listening'));
server.on('close', () => console.log('server::close'));
server.on('error', err => console.log(`server::error ${err ? '| err: ' + err : ''}`));

server.listen(config.port, () => console.log(`server::listen (${config.port})`));
